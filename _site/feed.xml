<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-06-14T11:50:00-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Paul Nakroshis, University of Southern Maine</title><subtitle>This github page will serves as a link for all my coding projects. The main impetus is because of a new project to introduce computing throughout all of our physics department's upper level courses.</subtitle><entry><title type="html">Computational Phyics Question Repository Created</title><link href="http://localhost:4000/physics/jupyter/julia/python/2021/06/14/ComputationalPhysics.html" rel="alternate" type="text/html" title="Computational Phyics Question Repository Created" /><published>2021-06-14T11:32:00-04:00</published><updated>2021-06-14T11:32:00-04:00</updated><id>http://localhost:4000/physics/jupyter/julia/python/2021/06/14/ComputationalPhysics</id><content type="html" xml:base="http://localhost:4000/physics/jupyter/julia/python/2021/06/14/ComputationalPhysics.html">&lt;h1 id=&quot;computational-physics-questions-repository&quot;&gt;Computational Physics Questions Repository&lt;/h1&gt;
&lt;p&gt;I’ve created the and uploaded the first two questions to the Computational Physics Questions repository.
This set of questions will grow over time, and will be arranged by course, and then topic within the course, and 
by descriptive subfolders. Each question will reside within its own folder containing python and julia .ipynb files along with
needed image files.&lt;/p&gt;

&lt;p&gt;I will not post questions until I have complete solutions available (but these will only be available to instructors).&lt;/p&gt;

&lt;p&gt;The questions I have uploaded are in Electrodynamics (we use Griffiths’ text, as do many colleges/universities)&lt;/p&gt;

&lt;p&gt;The first is a simple question (designed to be assigned in addition to 1.3 in Griffiths) 
to get students to use the vector capabilities of&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- numPy in Python
- built-in capability in Julia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second question is relevant for Ch.5 in Griffiths’ –it uses the Biot-Savart Law to 
compute the magnetic field on the axis of a current loop. There will be another Biot-Savart 
question where students will compute the field off-axis, but I haven’t written that one yet.&lt;/p&gt;

&lt;p&gt;For some reason I haven’t figured out, the notebooks don’t render in Github (anyone know a fix?)
but they do in the &lt;a href=&quot;https://nbviewer.jupyter.org/github/paulnakroshis/ComputationalPhysicsQuestions/tree/main/&quot;&gt;nbviewer&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="physics" /><category term="jupyter" /><category term="Julia" /><category term="Python" /><summary type="html">Computational Physics Questions Repository I’ve created the and uploaded the first two questions to the Computational Physics Questions repository. This set of questions will grow over time, and will be arranged by course, and then topic within the course, and by descriptive subfolders. Each question will reside within its own folder containing python and julia .ipynb files along with needed image files.</summary></entry><entry><title type="html">Why Julia</title><link href="http://localhost:4000/physics/jupyter/julia/python/2021/06/11/WhyJulia.html" rel="alternate" type="text/html" title="Why Julia" /><published>2021-06-11T09:10:00-04:00</published><updated>2021-06-11T09:10:00-04:00</updated><id>http://localhost:4000/physics/jupyter/julia/python/2021/06/11/WhyJulia</id><content type="html" xml:base="http://localhost:4000/physics/jupyter/julia/python/2021/06/11/WhyJulia.html">&lt;p&gt;Although we currently have been using python to teach our majors computing, the problem set questions I am developing will have composed with both Python and Julia versions. I’ve been keeping my eye on Julia’s development over recent years, and I feel that it has now reached a stage where it is more than sufficient for most of what I need to do in terms of teaching undergraduate physics, and sufficient to for data analysis in the laboratory.&lt;/p&gt;

&lt;p&gt;So why introduce Julia into the mix? I’ve been using Python for many years, and am mostly happy with it…until I have to do a computation that is not so trivial. Julia’s syntax is very similar to Python, and even has features that I appreciate as a physicist:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simple functions can be defined in one line such as f(x) = x^2&lt;/li&gt;
  &lt;li&gt;Julia understands that 2x = 2*x&lt;/li&gt;
  &lt;li&gt;array indexing starts at 1 (I know this is personal, but I &lt;em&gt;really&lt;/em&gt; like this feature)&lt;/li&gt;
  &lt;li&gt;arrays are built in and &lt;em&gt;fast&lt;/em&gt; without having to import something like NumPy&lt;/li&gt;
  &lt;li&gt;Julia is &lt;em&gt;very&lt;/em&gt; fast&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The speed is impressive. For instance, here is some code to compute the magnetic field on the axis of a current loop:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearAlgebra&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Plots&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LaTeXStrings&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    b_field(I, R, z, δϕ)

Computes the on-axis magnetic field in nanoTesla for a current 
loop with radius `R` and carrying current `I`

...
# Arguments
- `R::Float64` : radius of loop in meters; wire radius assumed negligible
- `I::Float64` : current in loop in Amperes; + current ccw when viewed from +z
- `z::Float64` : on-axis distance from plane of loop in meters
- `δϕ::Float64`: angular step in radians (used to integrate around loop)
...

# Examples
```julia-repl
julia&amp;gt; b_field(1.0, 1.0, 0.0, 0.0001)
3-element Vector{Float64}:
   0.0
   0.0
 628.31
```
```julia-repl
julia&amp;gt; b_field(1.0,1.0,1.0,0.0001)
3-element Vector{Float64}:
  -0.00301606
   2.7945e-7
 222.141
```
&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; b_field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;δϕ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;factor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0e-7&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ϕ&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;δϕ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;π&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;δϕ&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Idl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ϕ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ϕ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;δϕ&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ϕ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ϕ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cross&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Idl&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dB&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0e9&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigdigits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and here are four tests os this code (the analytical result provides and easy check) using steps of 1e-5 radian.
A Python version of this code (using NumPy) takes over 130 seconds to complete, and on a 2016 MBP, this takes 1.2 seconds in Julia.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expect B(z)=621.3185 :&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.00001&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expect B(z)=314.159 :&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.00001&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expect B(z)~ 0 :&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0e6&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.00001&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expect B(z)= 0 :&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_field&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0e6&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.00001&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="physics" /><category term="jupyter" /><category term="Julia" /><category term="Python" /><summary type="html">Although we currently have been using python to teach our majors computing, the problem set questions I am developing will have composed with both Python and Julia versions. I’ve been keeping my eye on Julia’s development over recent years, and I feel that it has now reached a stage where it is more than sufficient for most of what I need to do in terms of teaching undergraduate physics, and sufficient to for data analysis in the laboratory.</summary></entry><entry><title type="html">Integrating Computation throughout our physics curriculum</title><link href="http://localhost:4000/physics/computation/python/julia/2021/06/10/Computation.html" rel="alternate" type="text/html" title="Integrating Computation throughout our physics curriculum" /><published>2021-06-10T12:35:00-04:00</published><updated>2021-06-10T12:35:00-04:00</updated><id>http://localhost:4000/physics/computation/python/julia/2021/06/10/Computation</id><content type="html" xml:base="http://localhost:4000/physics/computation/python/julia/2021/06/10/Computation.html">&lt;p&gt;This summer and fall, I will be writing computational physics problem set questions in the form of Jupyter Notebooks. 
This is in support of a Maine Space Grant I received to help integrate computing throughout our University of Southern Maine 
physics curriculum.&lt;/p&gt;

&lt;p&gt;For more than a hundred years, physics students have primarily learned physics by being handed weekly analytical paper and pen questions.&lt;br /&gt;
But this is an extreme limitation to the types of problems which can be solved, and with computing now readily available, it makes sense to integrate computational problems into this mix.&lt;/p&gt;

&lt;p&gt;Doing so allows one to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;solve problems that do not admit analytic solutions&lt;/li&gt;
  &lt;li&gt;easily integrate visual simulations&lt;/li&gt;
  &lt;li&gt;build physical intuition by real time interaction with solutions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My work will involve creating problems for &lt;em&gt;all&lt;/em&gt; our upper level physics courses. I will organize these 
questions by course (as most physics departments have similar course requirement for B.S. in Physics), and
will make the questions freely available as Jupyter notebooks in both Julia (my new favorite language) and Python.&lt;/p&gt;

&lt;p&gt;Look for more info here as I create content. I will also make solutions available to faculty from other institutions,
and will (once I figure out how to manage this) welcome question additions.&lt;/p&gt;</content><author><name></name></author><category term="physics" /><category term="computation" /><category term="python" /><category term="julia" /><summary type="html">This summer and fall, I will be writing computational physics problem set questions in the form of Jupyter Notebooks. This is in support of a Maine Space Grant I received to help integrate computing throughout our University of Southern Maine physics curriculum.</summary></entry></feed>